/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Workout = {
  _id: string;
  _type: 'workout';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  name?: string;
  description?: string;
  duration?: number;
  exercises?: Array<{
    exercise?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'exercise';
    };
    sets?: Array<{
      setType?: 'reps' | 'duration';
      reps?: number;
      duration?: number;
      weight?: number;
      weightUnit?: 'kg' | 'lbs';
      restTime?: number;
      _type: 'set';
      _key: string;
    }>;
    notes?: string;
    _type: 'exerciseSet';
    _key: string;
  }>;
  createdAt?: string;
  updatedAt?: string;
};

export type Exercise = {
  _id: string;
  _type: 'exercise';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  difficultyLevel?: 'beginner' | 'intermediate' | 'advanced';
  exerciseImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  videoUrl?: string;
  isActive?: boolean;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Workout
  | Exercise
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../expo-app/src/groq/index.ts
// Variable: getWorkoutQuery
// Query: *[_type == "workout" && userId == $userId] | order(_createdAt desc) {  _id,  _createdAt,  duration,  exercises [] {   exercise -> {   _id,   name   },   sets [] {    setType,    reps,    weight,    weightUnit,    duration,    restTime,    _type,    _key   },   _type,   _key  }  }
export type GetWorkoutQueryResult = Array<{
  _id: string;
  _createdAt: string;
  duration: number | null;
  exercises: Array<{
    exercise: {
      _id: string;
      name: string | null;
    } | null;
    sets: Array<{
      setType: 'duration' | 'reps' | null;
      reps: number | null;
      weight: number | null;
      weightUnit: 'kg' | 'lbs' | null;
      duration: number | null;
      restTime: number | null;
      _type: 'set';
      _key: string;
    }> | null;
    _type: 'exerciseSet';
    _key: string;
  }> | null;
}>;
// Variable: getSingleWorkoutQuery
// Query: *[_type == "workout" && _id == $workoutId][0] {  _id,  _createdAt,  duration,  exercises [] {   exercise -> {   _id,   name   },   sets [] {    setType,    reps,    weight,    weightUnit,    duration,    restTime,    _type,    _key   },   _type,   _key  }  }
export type GetSingleWorkoutQueryResult = {
  _id: string;
  _createdAt: string;
  duration: number | null;
  exercises: Array<{
    exercise: {
      _id: string;
      name: string | null;
    } | null;
    sets: Array<{
      setType: 'duration' | 'reps' | null;
      reps: number | null;
      weight: number | null;
      weightUnit: 'kg' | 'lbs' | null;
      duration: number | null;
      restTime: number | null;
      _type: 'set';
      _key: string;
    }> | null;
    _type: 'exerciseSet';
    _key: string;
  }> | null;
} | null;
// Variable: exerciseQuery
// Query: *[_type == "exercise" && isActive == true]
export type ExerciseQueryResult = Array<{
  _id: string;
  _type: 'exercise';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  difficultyLevel?: 'advanced' | 'beginner' | 'intermediate';
  exerciseImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  videoUrl?: string;
  isActive?: boolean;
}>;
// Variable: singleExerciseQuery
// Query: *[_type == "exercise" && isActive == true && _id == $id][0]
export type SingleExerciseQueryResult = {
  _id: string;
  _type: 'exercise';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  difficultyLevel?: 'advanced' | 'beginner' | 'intermediate';
  exerciseImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  videoUrl?: string;
  isActive?: boolean;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "workout" && userId == $userId] | order(_createdAt desc) {\n  _id,\n  _createdAt,\n  duration,\n  exercises [] {\n   exercise -> {\n   _id,\n   name\n   },\n   sets [] {\n    setType,\n    reps,\n    weight,\n    weightUnit,\n    duration,\n    restTime,\n    _type,\n    _key\n   },\n   _type,\n   _key\n  }\n  }': GetWorkoutQueryResult;
    '*[_type == "workout" && _id == $workoutId][0] {\n  _id,\n  _createdAt,\n  duration,\n  exercises [] {\n   exercise -> {\n   _id,\n   name\n   },\n   sets [] {\n    setType,\n    reps,\n    weight,\n    weightUnit,\n    duration,\n    restTime,\n    _type,\n    _key\n   },\n   _type,\n   _key\n  }\n  }': GetSingleWorkoutQueryResult;
    '*[_type == "exercise" && isActive == true]': ExerciseQueryResult;
    '*[_type == "exercise" && isActive == true && _id == $id][0]': SingleExerciseQueryResult;
  }
}
